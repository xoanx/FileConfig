spring:
  application:
    name: apigateway
  cloud:
    gateway:
      routes:
        - id: employee_route
          uri: lb://employee
          predicates:
            - Path=/employee/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter: "#{@redisRateLimiter}"
                key-resolver: "#{@userKeyResolver}"
        - id: salary_route
          uri: lb://employee
          predicates:
            - Path=/salary/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter: "#{@redisRateLimiter}"
                key-resolver: "#{@userKeyResolver}"
        # Add other routes as needed

  data:
    redis:
      database: 0
      host: localhost
      port: 16379
      password: mypass
      timeout: 60000

server:
  port: 8080

logging:
  level:
    org:
      springframework:
        cloud:
          gateway: DEBUG
      example:
        apigateway:
          ConfigGateway: DEBUG

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# Configuration for rate limiter
replenishRate: 10
burstCapacity: 20
requestedTokens: 3



############################
spring:
  application:
    name:
      apigateway
  main:
    web-application-type:
      reactive
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: Employee
          uri: http://localhost:8080
          predicates:
            - Path=/get
          filters:
            - name: RequestRateLimiter
              args:
                requestedTokens: 3
                replenishRate: 10
                burstCapacity: 20
                key-resolver: "#{@userKeyResolver}"

server:
  port: 8080

logging:
  level:
    org:
      springframework:
        cloud:
          gateway: DEBUG
      example:
        apigateway:
          ConfigGateway: DEBUG

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

###DockerRedis


###






